name: build school-management-project-backend

on:
  push:
    branches: [ "master" ]

jobs:

  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Build and test with Maven
        run: ./mvnw clean verify

  push:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v3
      
      - name: Recreate Firebase service account key file
        run: |
          mkdir -p src/main/resources/firebase
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" | base64 -d > src/main/resources/firebase/serviceAccountKey.json

      - name: Set up Docker environment
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/francknana/sm-backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Connect to EC2 and deploy container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} -p ${{ secrets.GHCR_TOKEN }}
            docker pull ghcr.io/francknana/sm-backend:latest
            docker stop sm-backend || true
            docker rm sm-backend || true
            docker run -d --name sm-backend \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=${{ secrets.SERVER_PORT }} \
              -e POSTGRES_ADDR=${{ secrets.POSTGRES_ADDR }} \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} \
              ghcr.io/francknana/sm-backend:latest
      
            echo "‚è≥ Attente du d√©marrage de l'application..."
            for i in {1..30}; do
              if curl -s http://localhost:${{ secrets.SERVER_PORT }}/api/v1/hello | grep -q "Hello World"; then
                echo "‚úÖ L'API est accessible"
                break
              fi
              sleep 2
            done

            echo "üîç V√©rification finale..."
            curl -f http://localhost:${{ secrets.SERVER_PORT }}/api/v1/hello